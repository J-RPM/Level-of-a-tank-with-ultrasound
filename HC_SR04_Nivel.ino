 /*
              Medidor de litros de un depósito, a partir de la distancia desde la parte superior al líquido
                             Distancia medida con sensor de ultrasonidos: HC-SR04
                                      Display OLED: SSD1306 (128x64)
                                   Aviso acústico al llegar a la reserva 

                                            *** IMPORTANTE ***
                La librería: Adafruit_SSD1306.h permite el uso de múltiples tamaños de pantalla 
            Comprueba que estén habilitos los códigos de tamaño y dirección I2C de esta pantalla OLED
                                        #define SSD1306_I2C_ADDRESS   0x3C
                                            #define SSD1306_128_64
__________________ _____________________________________________________________________________________________________

                                            Escrito por: J_RPM
                                     Más información: http://j-rpm.com/
                                         Noviembre de 2022 (v1.0)
__________________ _____________________________________________________________________________________________________
 */
 
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>       //https://github.com/adafruit/Adafruit-GFX-Library
#include <Adafruit_SSD1306.h>   //https://github.com/adafruit/Adafruit_SSD1306

// Dirección I2C del display OLED
#define OLED_ADDR   0x3C
#define OLED_RESET 4
Adafruit_SSD1306 display(OLED_RESET);

#define pinBeep 11           // Pin Buzzer
#define echoPin 12           // Pin Echo HC-SR04
#define trigPin 13           // Pin Trigger HC-SR04

boolean dir  = false;
int x = 0;

// Configuración del depósito
float D_max = 140;            // Altura del sensor hasta el fondo del depósito
float D_offset = 5;           // Distancia mínima del sensor hasta el líquido (depósito lleno)
float Reserva  = 40;          // Centímetros de combustible mínimo, desde el fondo del depósito al nivel del líquido = Reserva                   
float L_max = 1000;           // Capacidad máxima del depósito, litros
float Litro_cm;               // Para calcular el número de litros por centímetro >>> L_max /(D_max - D_offset) 

/*______________________________________________________________________________________________
                           >>>   Gráfico 128x64   <<<
  Para crear este código a partir de una imagen BMP, puedes utilizar el software: LCD Assistant
                    http://en.radzio.dxp.pl/bitmap_converter/
 */
static const unsigned char PROGMEM Cgraf_JR [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x03, 0xF3, 0xF0, 0x38, 0xF7, 0x7B, 0x83, 0xBD, 0xF8, 0x18, 0x7E, 0x00, 0x00, 0x00,
0x00, 0x00, 0x03, 0xF3, 0xF0, 0x38, 0xF7, 0x7B, 0x83, 0xBD, 0xF8, 0x18, 0x7E, 0x00, 0x00, 0x00,
0x00, 0xC0, 0xC1, 0x99, 0x98, 0xC6, 0x34, 0x31, 0xC7, 0x18, 0xC6, 0x2C, 0x31, 0x86, 0x06, 0x00,
0x00, 0xC0, 0xC1, 0x99, 0x98, 0xC6, 0x34, 0x31, 0xC7, 0x18, 0xC6, 0x2C, 0x31, 0x86, 0x06, 0x00,
0x0C, 0x0C, 0x01, 0xF1, 0xF0, 0xC6, 0x18, 0x31, 0x6B, 0x18, 0xC6, 0x3C, 0x31, 0x80, 0x60, 0x60,
0x0C, 0x0C, 0x01, 0xF1, 0xF0, 0xC6, 0x18, 0x31, 0x6B, 0x18, 0xC6, 0x3C, 0x31, 0x80, 0x60, 0x60,
0x00, 0xC0, 0xC1, 0x81, 0x98, 0xC6, 0x2C, 0x31, 0x33, 0x18, 0xC6, 0x46, 0x31, 0x86, 0x06, 0x00,
0x00, 0xC0, 0xC1, 0x81, 0x98, 0xC6, 0x2C, 0x31, 0x33, 0x18, 0xC6, 0x46, 0x31, 0x86, 0x06, 0x00,
0x00, 0x00, 0x03, 0xC3, 0xDC, 0x38, 0xEF, 0x7B, 0x87, 0xBD, 0xF8, 0xEF, 0x7E, 0x00, 0x00, 0x00,
0x00, 0x00, 0x03, 0xC3, 0xDC, 0x38, 0xEF, 0x7B, 0x87, 0xBD, 0xF8, 0xEF, 0x7E, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x3E, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x3E, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x07, 0xC0, 0x00, 0x07, 0x81, 0xF1, 0xF1, 0x86,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x07, 0xC0, 0x00, 0x07, 0x81, 0xF1, 0xF1, 0x86,
0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x3F, 0x00, 0x0F, 0xC0, 0x00, 0x01, 0x81, 0x99, 0x99, 0xCE,
0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x3F, 0x00, 0x0F, 0xC0, 0x00, 0x01, 0x81, 0x99, 0x99, 0xCE,
0x00, 0x00, 0x00, 0x03, 0x80, 0xF8, 0x3C, 0x00, 0x1F, 0x80, 0x07, 0x81, 0x81, 0xF1, 0x99, 0xB6,
0x00, 0x00, 0x00, 0x03, 0x80, 0xF8, 0x3C, 0x00, 0x1F, 0x80, 0x07, 0x81, 0x81, 0xF1, 0x99, 0xB6,
0x00, 0x00, 0x00, 0x0F, 0xC1, 0xF8, 0x7F, 0x00, 0x3E, 0x02, 0x0F, 0xC1, 0x81, 0xF9, 0xF1, 0x86,
0x00, 0x00, 0x00, 0x0F, 0xC1, 0xF8, 0x7F, 0x00, 0x3E, 0x02, 0x0F, 0xC1, 0x81, 0xF9, 0xF1, 0x86,
0x00, 0x00, 0x00, 0x3F, 0xC3, 0xF0, 0x7F, 0xC0, 0x7E, 0x04, 0x7F, 0x07, 0x81, 0x99, 0x81, 0x86,
0x00, 0x00, 0x00, 0x3F, 0xC3, 0xF0, 0x7F, 0xC0, 0x7E, 0x04, 0x7F, 0x07, 0x81, 0x99, 0x81, 0x86,
0x00, 0x00, 0x00, 0x7F, 0x87, 0xC0, 0xFF, 0x90, 0xFE, 0x09, 0xFE, 0x03, 0x3D, 0x99, 0x81, 0x86,
0x00, 0x00, 0x00, 0x7F, 0x87, 0xC0, 0xFF, 0x90, 0xFE, 0x09, 0xFE, 0x03, 0x3D, 0x99, 0x81, 0x86,
0x00, 0x00, 0x00, 0xFE, 0x1F, 0xC0, 0xFE, 0x04, 0xFC, 0x1B, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0xFE, 0x1F, 0xC0, 0xFE, 0x04, 0xFC, 0x1B, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x01, 0xFC, 0x3F, 0xC0, 0xFF, 0x01, 0xFC, 0x33, 0xF8, 0x00, 0x00, 0x3C, 0x00, 0x00,
0x00, 0x00, 0x01, 0xFC, 0x3F, 0xC0, 0xFF, 0x01, 0xFC, 0x33, 0xF8, 0x00, 0x00, 0x3C, 0x00, 0x00,
0x00, 0x00, 0x03, 0xF8, 0x1F, 0xC0, 0x7E, 0x00, 0x7F, 0x23, 0xF8, 0xC0, 0x00, 0x7E, 0x00, 0x00,
0x00, 0x00, 0x03, 0xF8, 0x1F, 0xC0, 0x7E, 0x00, 0x7F, 0x23, 0xF8, 0xC0, 0x00, 0x7E, 0x00, 0x00,
0x00, 0x00, 0x07, 0xF8, 0x1F, 0xFC, 0x3E, 0x00, 0xF9, 0xC7, 0xFF, 0xE0, 0x1F, 0xFC, 0x1E, 0x00,
0x00, 0x00, 0x07, 0xF8, 0x1F, 0xFC, 0x3E, 0x00, 0xF9, 0xC7, 0xFF, 0xE0, 0x1F, 0xFC, 0x1E, 0x00,
0x00, 0x1E, 0x07, 0xF8, 0x0F, 0xFE, 0x3E, 0x00, 0xFC, 0xC7, 0xFF, 0xF0, 0x3F, 0xF8, 0x3F, 0xC0,
0x00, 0x1E, 0x07, 0xF8, 0x0F, 0xFE, 0x3E, 0x00, 0xFC, 0xC7, 0xFF, 0xF0, 0x3F, 0xF8, 0x3F, 0xC0,
0x00, 0xFF, 0x07, 0xF8, 0x0F, 0xCC, 0x3F, 0x00, 0x7F, 0x07, 0xFF, 0x40, 0xFF, 0xE7, 0xBF, 0xC0,
0x00, 0xFF, 0x07, 0xF8, 0x0F, 0xCC, 0x3F, 0x00, 0x7F, 0x07, 0xFF, 0x40, 0xFF, 0xE7, 0xBF, 0xC0,
0x01, 0xFF, 0x07, 0xF8, 0x0F, 0xE8, 0x3F, 0x00, 0x7F, 0x03, 0xFC, 0x01, 0xFF, 0xFF, 0xDF, 0x80,
0x01, 0xFF, 0x07, 0xF8, 0x0F, 0xE8, 0x3F, 0x00, 0x7F, 0x03, 0xFC, 0x01, 0xFF, 0xFF, 0xDF, 0x80,
0x07, 0xFE, 0x03, 0xF8, 0x07, 0xF0, 0x3F, 0x00, 0x7F, 0x01, 0xF8, 0x01, 0xFF, 0xFC, 0x1F, 0xF0,
0x07, 0xFE, 0x03, 0xF8, 0x07, 0xF0, 0x3F, 0x00, 0x7F, 0x01, 0xF8, 0x01, 0xFF, 0xFC, 0x1F, 0xF0,
0x0F, 0xFE, 0x03, 0xFC, 0x07, 0xF0, 0x3F, 0x80, 0x3F, 0x01, 0xFC, 0x01, 0xFF, 0xFF, 0xFF, 0xF8,
0x0F, 0xFE, 0x03, 0xFC, 0x07, 0xF0, 0x3F, 0x80, 0x3F, 0x01, 0xFC, 0x01, 0xFF, 0xFF, 0xFF, 0xF8,
0x1F, 0x9F, 0x01, 0xFC, 0x07, 0xF8, 0x77, 0x00, 0xFF, 0x01, 0xDC, 0x01, 0xFF, 0xFC, 0xFF, 0xF0,
0x1F, 0x9F, 0x01, 0xFC, 0x07, 0xF8, 0x77, 0x00, 0xFF, 0x01, 0xDC, 0x01, 0xFF, 0xFC, 0xFF, 0xF0,
0x0F, 0xCF, 0xC3, 0xF8, 0x1E, 0x70, 0x77, 0x01, 0xDF, 0x07, 0xBC, 0x00, 0x30, 0x70, 0x7F, 0xC0,
0x0F, 0xCF, 0xC3, 0xF8, 0x1E, 0x70, 0x77, 0x01, 0xDF, 0x07, 0xBC, 0x00, 0x30, 0x70, 0x7F, 0xC0,
0x0F, 0xC7, 0xE7, 0xB8, 0x1C, 0x70, 0x67, 0x81, 0xF6, 0x07, 0x38, 0x00, 0x50, 0xE0, 0x7F, 0xC0,
0x0F, 0xC7, 0xE7, 0xB8, 0x1C, 0x70, 0x67, 0x81, 0xF6, 0x07, 0x38, 0x00, 0x50, 0xE0, 0x7F, 0xC0,
0x1E, 0xC3, 0xB7, 0x38, 0x38, 0x70, 0x63, 0x83, 0xFE, 0x0E, 0x38, 0x00, 0x17, 0xC0, 0x7E, 0x00,
0x1E, 0xC3, 0xB7, 0x38, 0x38, 0x70, 0x63, 0x83, 0xFE, 0x0E, 0x38, 0x00, 0x17, 0xC0, 0x7E, 0x00,
0x39, 0xC1, 0x87, 0x38, 0x70, 0x60, 0x63, 0x87, 0x1E, 0x1C, 0x38, 0x03, 0xFF, 0xE0, 0x7E, 0x00,
0x39, 0xC1, 0x87, 0x38, 0x70, 0x60, 0x63, 0x87, 0x1E, 0x1C, 0x38, 0x03, 0xFF, 0xE0, 0x7E, 0x00,
0x19, 0xE1, 0xC7, 0x9E, 0x38, 0x78, 0x7B, 0xC7, 0xCF, 0x8F, 0x1C, 0x03, 0xDF, 0xE0, 0x70, 0x00,
0x19, 0xE1, 0xC7, 0x9E, 0x38, 0x78, 0x7B, 0xC7, 0xCF, 0x8F, 0x1C, 0x03, 0xDF, 0xE0, 0x70, 0x00
};

//______________________________________________________________________________________________

//Comprueba que la librería Adafruit_SSD1306.h esté configurada para este tamaño de pantalla
#if (SSD1306_LCDHEIGHT != 64)
  #error("Display incorrecto, revisa: Adafruit_SSD1306.h");
#endif

void setup() {
  Serial.begin(9600);

  // Se calcula el número de litros por centímetro >>> L_max /(D_max - D_offset) 
  Litro_cm = L_max /(D_max - D_offset);              
  Serial.print(F("Litros del depósito lleno: "));  
  Serial.println(L_max);  
  Serial.print(F("Altura del sensor (cm): "));  
  Serial.println(D_max);  
  Serial.print(F("Distancia del sensor con el depósito lleno (cm): "));  
  Serial.println(D_offset);  
  Serial.print(F("Litros por centímetro: "));  
  Serial.println(Litro_cm);  
  
  pinMode(pinBeep,OUTPUT);
  pinMode(echoPin, INPUT);
  pinMode(trigPin, OUTPUT);
   
  //Inicializa I2C con dirección 0x3C (OLED 128x64)
  display.begin(SSD1306_SWITCHCAPVCC, OLED_ADDR);
  
  // Presenta el logo durante 2 segundos
  logo();
 
  // 5 destellos del logo invirtiendo, con avisos acústicos
  for(int i = 0; i < 5; i++){
    digitalWrite(pinBeep,HIGH);
    display.invertDisplay(true);
    delay (20);
    digitalWrite(pinBeep,LOW);
    display.invertDisplay(false);
    delay (50);
  }
  delay (500);
  display.clearDisplay();
}

void loop() {
  long tiempo, distancia;
  int litros;
  
  // Envía impulso
  digitalWrite(trigPin, LOW);  
  delayMicroseconds(5); 
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10); 
  digitalWrite(trigPin, LOW);
  
  //Mide el tiempo del eco recibido
  tiempo = pulseIn(echoPin, HIGH);

  //Limita la medida máxima a la altura del depósito >>> tiempo = D_max * 2 * 29.144
  if (tiempo <= (D_max * 2 * 29.144)) {
    distancia = (tiempo/2) / 29.144;    // Centímetros
  }else{
    distancia = D_max;                  // Distancia máxima = Depósito vacío
  }

  Serial.print(F("Distancia del líquido (cm): "));  
  Serial.println(distancia);  

  // Calcula los litros del depósito, en función de la distancia desde el sensor hasta el líquido
  // litros = L_max - ((distancia - D_offset) * Litro_cm); 
  litros = L_max - ((distancia - D_offset) * Litro_cm);

  Serial.print(F("Litros de Gasoil: "));  
  Serial.println(litros);  

  //Mide el número de caracteres
  String largo =  String(litros, DEC); 
  
  //Alinea el número a la derecha 
  int puntoInicio = 72 - (18*(largo.length())-1);   

  //Display OLED
  display.setCursor(0,0);  
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.println  ("Almacenado");
  
  display.setCursor(puntoInicio,20);  
  display.setTextSize(3);
  display.println(litros);
  display.setCursor(74,20);
  display.setTextSize(3);
  display.println(" L.");

  efectoOnda();

  //Refresca el display
  display.display();
  pitaReserva(distancia);        //Pita al llegar a la reserva
  
  display.clearDisplay();
}

///////////////////////////////////////
//////////// Subrutinas ///////////////
///////////////////////////////////////

// Pita al llegar a la reserva
 void pitaReserva(int valor) {
    if(valor >= (D_max - Reserva)){  
        digitalWrite(pinBeep,HIGH);
        delay (100);
        digitalWrite(pinBeep,LOW);
        delay (100);
    }else{
        digitalWrite(pinBeep,LOW);
        delay (200);
    }
}
///////////////////////////////////////
void logo() {

  // Borra el display
  display.clearDisplay();
      
  // Carga y presenta el archivo BMP en el display
  display.drawBitmap(0, 0, Cgraf_JR, 128, 64, 1);
  display.display();
  delay(2000);

 }
///////////////////////////////////////
void efectoOnda() {
  display.setTextSize(2);
  if(dir == false){
    x = x + 6;
    if(x >= 80){dir = true;}
    display.setCursor(x,50);  
    display.println(">>>");
  }else{
    x = x - 6;
    if(x <= 0){dir = false;}
    display.setCursor(x,50);  
    display.println("<<<");
  }
}
// FIN //  
